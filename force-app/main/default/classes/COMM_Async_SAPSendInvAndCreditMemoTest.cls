/**
 * @author Daniel Reto
 * @description COMM_Async_SAPSendInvoiceAndCreditMemo test class
 *
 * Modification Log
 * ------------------------------------------------------------------------------------
 * Developer        Date            Coverage(%)     Description
 * -----------------------------------------------------------------------------------
 * Daniel Reto      15/04/2024      0               ECOMM-307: Original version
 **/
@isTest
private class COMM_Async_SAPSendInvAndCreditMemoTest {
    private final static fflib_ApexMocks MOCKS = new fflib_ApexMocks();
    private final static FW_IREP_JobExecution JOB_EXECUTION_REP = (FW_REP_JobExecution) MOCKS.mock(FW_REP_JobExecution.class);
    private final static FW_IREP_Parameters PARAMETERS_REP = (FW_REP_Parameters) MOCKS.mock(FW_REP_Parameters.class);
    private final static COMM_IREP_Account ACCOUNT_REP = (COMM_REP_Account) MOCKS.mock(COMM_REP_Account.class);
    private final static COMM_IREP_Invoice INVOICE_REP = (COMM_REP_Invoice) MOCKS.mock(COMM_REP_Invoice.class);
    private final static COMM_IREP_CreditMemo CREDITMEMO_REP = (COMM_REP_CreditMemo) MOCKS.mock(COMM_REP_CreditMemo.class);
    private final static COMM_IREP_MonthlyFiscalDocumentControl FISCAL_CONTROL_REP = (COMM_REP_MonthlyFiscalDocumentControl) MOCKS.mock(
        COMM_REP_MonthlyFiscalDocumentControl.class
    );
    private final static COMM_IREP_OrderItemAdjustmentLineSummary ORDER_ITEM_ADJUSTMENT_REP = (COMM_REP_OrderItemAdjustmentLineSummary) MOCKS.mock(
        COMM_REP_OrderItemAdjustmentLineSummary.class
    );
    private static final String DUMMYDOCID = 'SAP-DUMMY-DOC-ID';

    @testSetup
    static void setup() {
        PaymentAuthorization paymentAuthorizationRecord = COMM_OMS_TestDataFactory.createOrderAndPaymentAuthorization();

        // Validate that required data was generated by the flows
        List<OrderSummary> osList = [SELECT Id, Status, (SELECT Id FROM OrderItemSummaries) FROM OrderSummary];
        System.assertEquals(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, Status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].Id
        ];

        String orderProductSummaryIds = '';
        for (OrderItemSummary OrderItemSummaryRecord : osList[0].OrderItemSummaries) {
            orderProductSummaryIds += OrderItemSummaryRecord.Id + ',';
        }

        Map<String, Object> params = new Map<String, Object>();
        params.put('returnedOrderSummaryId', osList[0].Id);
        params.put('returnedOrderProductSummaryIds', orderProductSummaryIds.removeEnd(','));

        Flow.Interview.COMM_OMS_Cancel_Item cancelItemFlow = new Flow.Interview.COMM_OMS_Cancel_Item(params);
        cancelItemFlow.start();
    }

    @isTest
    static void generateCreditPaymentBatchStartTest() {
        //Scenario: Batch to generate a new credit payment in SAP for last month. Mock is used for DML insert.
        //Expected: A Control Record is inserted. Since Mock is used execute method is skipped (tested in another).

        //Create Mocked Records for Framework Batch Execution Logic
        List<Batch_Definition__c> batchDefinitionList = new List<Batch_Definition__c>{
            new Batch_Definition__c(
                Id = fflib_IDGenerator.generate(Batch_Definition__c.sObjectType),
                Batch_Name__c = 'SAPSendInvoiceAndCreditMemo',
                Class_Name__c = 'COMM_Async_SAPSendInvoiceAndCreditMemo',
                Job_Size__c = 1,
                SObject_API_Name__c = 'COMM_MonthlyFiscalDocumentControl__c'
            )
        };
        List<Job_Execution__c> jobExecutionList = new List<Job_Execution__c>{
            new Job_Execution__c(
                Id = fflib_IDGenerator.generate(Job_Execution__c.sObjectType),
                Batch_Definition__c = batchDefinitionList[0].id,
                Run_With_Defaults__c = true,
                Status__c = FW_DO_JobExecution.JOB_EXEC_STATUS_NEW
            )
        };

        // Get Account data
        String relatedRecordStatus = 'Posted';
        List<Account> accountList = Database.query(
            'SELECT Id, BillingStreet, BillingPostalCode, BillingCity, BillingCountryCode, COMM_BillingFirstName__c, COMM_BillingLastName__c, COMM_VATNumber__c, IsPersonAccount, Name, PersonEmail, COMM_Email__c, COMM_StaffCompanyRatio__c, COMM_OfficialEntityRatio__c, (SELECT Id, DueDate, TYPEOF ReferenceEntity WHEN OrderSummary THEN COMM_SalesType__c END FROM Invoices WHERE DueDate = THIS_MONTH AND COMM_SAPDocumentId__c = NULL AND Status =: relatedRecordStatus), (SELECT Id, CreditDate, TYPEOF ReferenceEntity WHEN OrderSummary THEN COMM_SalesType__c END FROM CreditMemos WHERE CreditDate = THIS_MONTH AND COMM_SAPDocumentId__c = NULL AND Status =: relatedRecordStatus) FROM Account'
        );

        System.assertEquals(accountList.isEmpty(), false, 'Account not found.');
        accountList.get(0).BillingCountryCode = 'GB';

        List<Parameters__c> parametersList = new List<Parameters__c>{
            new Parameters__c(Id = fflib_IDGenerator.generate(Parameters__c.sObjectType), Name = FW_AsyncHandler.DEFAULT_PARAMETER),
            new Parameters__c(
                Id = fflib_IDGenerator.generate(Parameters__c.sObjectType),
                Name = COMM_Async_SAPSendInvoiceAndCreditMemo.PARAMETER_DATECLAUSE,
                Value__c = 'LAST_MONTH'
            ),
            new Parameters__c(
                Id = fflib_IDGenerator.generate(Parameters__c.sObjectType),
                Name = COMM_Async_SAPSendInvoiceAndCreditMemo.PARAMETER_MAXRETRIES,
                Value__c = '5'
            ),
            new Parameters__c(
                Id = fflib_IDGenerator.generate(Parameters__c.sObjectType),
                Name = COMM_Async_SAPSendInvoiceAndCreditMemo.PARAMETER_RETRY_ONLY,
                Value__c = 'false'
            )
        };

        //Expected Fiscal Control Insert Call
        List<COMM_MonthlyFiscalDocumentControl__c> expectedInsertList = new List<COMM_MonthlyFiscalDocumentControl__c>();
        COMM_MonthlyFiscalDocumentControl__c controlRecord = new COMM_MonthlyFiscalDocumentControl__c();
        controlRecord.COMM_Account__c = accountList.get(0).Id;
        controlRecord.COMM_Type__c = COMM_DO_MonthlyFiscalDocumentControl.RESERVATION_TYPE;
        controlRecord.COMM_ProcessStatus__c = COMM_DO_MonthlyFiscalDocumentControl.NOTPROCESSED_STATUS;
        controlRecord.COMM_RetryCounter__c = 0;
        controlRecord.COMM_DocumentMonth__c = System.now().addMonths(-1).month();
        controlRecord.COMM_DocumentYear__c = System.now().addMonths(-1).year();
        expectedInsertList.add(controlRecord);

        //Mock Queries
        MOCKS.startStubbing();
        MOCKS.when(ACCOUNT_REP.getAffiliateAccountsWithInvoicesAndCreditMemosByDateLiteral('LAST_MONTH')).thenReturn(accountList);
        MOCKS.when(ORDER_ITEM_ADJUSTMENT_REP.getOrderItemAdjustLineSumByOrderItemSummaryIds((Set<Id>) fflib_Match.anyObject()))
            .thenReturn(new List<OrderItemAdjustmentLineSummary>());
        MOCKS.when(FISCAL_CONTROL_REP.insertSObjects((List<COMM_MonthlyFiscalDocumentControl__c>) fflib_Match.anyList()))
            .thenReturn(new List<Database.SaveResult>());
        MOCKS.when(JOB_EXECUTION_REP.getJobExecWithBatchDefinitionsByIdSet((Set<Id>) fflib_match.anyObject())).thenReturn(jobExecutionList);
        MOCKS.when(JOB_EXECUTION_REP.getJobExecutionByAsyncApexJobIdSet((Id) fflib_match.anyObject())).thenReturn(jobExecutionList);
        MOCKS.when(PARAMETERS_REP.getParametersByParentId((Set<Id>) fflib_match.anyObject())).thenReturn(parametersList);
        MOCKS.stopStubbing();

        //Start Test
        Test.startTest();
        COMM_Async_SAPSendInvoiceAndCreditMemo newBatchRun = new COMM_Async_SAPSendInvoiceAndCreditMemo();
        newBatchRun = new COMM_Async_SAPSendInvoiceAndCreditMemo(
            JOB_EXECUTION_REP,
            PARAMETERS_REP,
            ACCOUNT_REP,
            INVOICE_REP,
            CREDITMEMO_REP,
            FISCAL_CONTROL_REP,
            ORDER_ITEM_ADJUSTMENT_REP
        );
        Database.executeBatch(newBatchRun);
        newBatchRun.setAsyncApexJobId(null);
        Test.stopTest();

        //Verify Results
        ((COMM_IREP_Account) mocks.verify(ACCOUNT_REP, 1)).getAffiliateAccountsWithInvoicesAndCreditMemosByDateLiteral('LAST_MONTH');
        // to review
        //((COMM_IREP_MonthlyFiscalDocumentControl) mocks.verify(FISCAL_CONTROL_REP, 1)).insertSObjects(expectedInsertList);
    }

    @isTest
    static void generateCreditPaymentBatchExecuteTest() {
        //Scenario: Batch to generate a new credit payment in SAP for last month. Mock is used for DML insert.
        //Expected: A Control Record is inserted. Since Mock is used execute method is skipped (tested in another).

        //Create Mocked Records for Framework Batch Execution Logic
        List<Batch_Definition__c> batchDefinitionList = new List<Batch_Definition__c>{
            new Batch_Definition__c(
                Id = fflib_IDGenerator.generate(Batch_Definition__c.sObjectType),
                Batch_Name__c = 'SAPSendInvoiceAndCreditMemo',
                Class_Name__c = 'COMM_Async_SAPSendInvoiceAndCreditMemo',
                Job_Size__c = 1,
                SObject_API_Name__c = 'COMM_MonthlyFiscalDocumentControl__c'
            )
        };
        List<Job_Execution__c> jobExecutionList = new List<Job_Execution__c>{
            new Job_Execution__c(
                Id = fflib_IDGenerator.generate(Job_Execution__c.sObjectType),
                Batch_Definition__c = batchDefinitionList[0].id,
                Run_With_Defaults__c = true,
                Status__c = FW_DO_JobExecution.JOB_EXEC_STATUS_NEW
            )
        };

        List<Parameters__c> parametersList = new List<Parameters__c>{
            new Parameters__c(Id = fflib_IDGenerator.generate(Parameters__c.sObjectType), Name = FW_AsyncHandler.DEFAULT_PARAMETER),
            new Parameters__c(
                Id = fflib_IDGenerator.generate(Parameters__c.sObjectType),
                Name = COMM_Async_SAPSendInvoiceAndCreditMemo.PARAMETER_DATECLAUSE,
                Value__c = 'LAST_MONTH'
            ),
            new Parameters__c(
                Id = fflib_IDGenerator.generate(Parameters__c.sObjectType),
                Name = COMM_Async_SAPSendInvoiceAndCreditMemo.PARAMETER_MAXRETRIES,
                Value__c = '5'
            ),
            new Parameters__c(
                Id = fflib_IDGenerator.generate(Parameters__c.sObjectType),
                Name = COMM_Async_SAPSendInvoiceAndCreditMemo.PARAMETER_RETRY_ONLY,
                Value__c = 'false'
            )
        };

        // Get Invoice data
        List<Invoice> invoiceIdList = [SELECT Id FROM Invoice];
        System.assertEquals(invoiceIdList.isEmpty(), false, 'Invoice not found.');
        List<Id> incoiceIdSet = new List<Id>();
        for (Invoice invc : invoiceIdList) {
            incoiceIdSet.add(invc.id);
        }
        List<Invoice> invoiceList = (List<Invoice>) Database.query(
            'SELECT ' +
                'Id, ' +
                'Status, ' +
                'DocumentNumber, ' +
                'DueDate, ' +
                'TotalAmount, ' +
                'COMM_SAPCount__c, ' +
                'TotalTaxAmount, ' +
                'BillingAccountId, ' +
                'BillingAccount.Name, ' +
                'BillingAccount.COMM_Email__c, ' +
                'BillingAccount.COMM_VATNumber__c, ' +
                'TYPEOF ReferenceEntity ' +
                'WHEN OrderSummary THEN ' +
                'ID, ' +
                'SalesChannel.SalesChannelName, ' +
                'COMM_SalesType__c, ' +
                'OrderedDate, ' +
                'BillingStreet, ' +
                'BillingPostalCode, ' +
                'BillingCity, ' +
                'BillingCountryCode ' +
                'END, ' +
                '( ' +
                'SELECT ' +
                'Id, ' +
                'Product2.Id, ' +
                'Product2.StockKeepingUnit, ' +
                'Product2.COMM_SAPLocation__c, ' +
                'Product2.COMM_Tax__c, ' +
                'TYPEOF ReferenceEntityItem ' +
                'WHEN OrderItemSummary THEN Description ' +
                'END, ' +
                'Quantity, ' +
                'LineAmount, ' +
                'RelatedLineId, ' +
                'ReferenceEntityItemType, ' +
                'Type ' +
                'FROM InvoiceLines ' +
                ') ' +
                'FROM Invoice ' +
                'WHERE ' +
                'Id IN :incoiceIdSet'
        );
        System.assertEquals(invoiceList.isEmpty(), false, 'Invoice not found.');
        invoiceList[0].DueDate = invoiceList[0].DueDate.addMonths(-1);
        ((OrderSummary) invoiceList[0].ReferenceEntity).COMM_SalesType__c = 'VC';

        // Get Credit Memo data
        List<CreditMemo> creditMemoIdList = [SELECT Id FROM CreditMemo];
        System.assertEquals(creditMemoIdList.isEmpty(), false, 'CreditMemo not found.');
        Set<Id> creditMemoIdSet = new Set<Id>();
        for (CreditMemo creditMemoRecord : creditMemoIdList) {
            creditMemoIdSet.add(creditMemoRecord.Id);
        }
        List<CreditMemo> creditMemoList = (List<CreditMemo>) Database.query(
            'SELECT ' +
                'Id, ' +
                'Status, ' +
                'DocumentNumber, ' +
                'CreditDate, ' +
                'TotalAmount, ' +
                'COMM_SAPCount__c, ' +
                'TotalTaxAmount, ' +
                'BillingAccountId, ' +
                'BillingAccount.Name, ' +
                'BillingAccount.COMM_Email__c, ' +
                'BillingAccount.COMM_VATNumber__c, ' +
                'TYPEOF ReferenceEntity ' +
                'WHEN OrderSummary THEN ' +
                'ID, ' +
                'SalesChannel.SalesChannelName, ' +
                'COMM_SalesType__c, ' +
                'OrderedDate, ' +
                'BillingStreet, ' +
                'BillingPostalCode, ' +
                'BillingCity, ' +
                'BillingCountryCode ' +
                'END, ' +
                '( ' +
                'SELECT ' +
                'Id, ' +
                'Product2.Id, ' +
                'Product2.StockKeepingUnit, ' +
                'Product2.COMM_SAPLocation__c, ' +
                'Product2.COMM_Tax__c, ' +
                'TYPEOF ReferenceEntityItem ' +
                'WHEN OrderItemSummary THEN Description ' +
                'END, ' +
                'LineAmount, ' +
                'RelatedLineId, ' +
                'ReferenceEntityItemType, ' +
                'Type ' +
                'FROM CreditMemoLines ' +
                ') ' +
                'FROM CreditMemo ' +
                'WHERE ' +
                'Id IN :creditMemoIdSet'
        );
        System.assertEquals(creditMemoList.isEmpty(), false, 'CreditMemo not found.');
        creditMemoList[0].CreditDate = creditMemoList[0].CreditDate.addMonths(-1);
        ((OrderSummary) creditMemoList[0].ReferenceEntity).COMM_SalesType__c = 'VC';

        // Get Account data
        String query = new FW_QueryBuilder(Account.sObjectType)
            .selectFields(
                new List<SObjectField>{
                    Account.Id,
                    Account.BillingStreet,
                    Account.BillingPostalCode,
                    Account.BillingCity,
                    Account.BillingCountryCode,
                    Account.COMM_BillingFirstName__c,
                    Account.COMM_BillingLastName__c,
                    Account.COMM_VATNumber__c,
                    Account.IsPersonAccount,
                    Account.Name,
                    Account.PersonEmail,
                    Account.COMM_Email__c,
                    Account.COMM_StaffCompanyRatio__c,
                    Account.COMM_OfficialEntityRatio__c
                }
            )
            .selectSubquery('Invoices', new List<SObjectField>{ Invoice.Id })
            .getParent()
            .selectSubquery('CreditMemos', new List<SObjectField>{ CreditMemo.Id })
            .getParent()
            .whereEquals('IsPersonAccount', true)
            .getQuery();
        List<Account> accountList = Database.query(query);
        System.assertEquals(accountList.isEmpty(), false, 'Account not found.');
        accountList.get(0).BillingCountryCode = 'GB';

        //Expected Fiscal Control Insert Call
        List<COMM_MonthlyFiscalDocumentControl__c> expectedInsertList = new List<COMM_MonthlyFiscalDocumentControl__c>();
        COMM_MonthlyFiscalDocumentControl__c controlRecord = new COMM_MonthlyFiscalDocumentControl__c();
        controlRecord.COMM_Account__c = accountList[0].Id;
        controlRecord.COMM_Type__c = COMM_DO_MonthlyFiscalDocumentControl.RESERVATION_TYPE;
        controlRecord.COMM_ProcessStatus__c = COMM_DO_MonthlyFiscalDocumentControl.NOTPROCESSED_STATUS;
        controlRecord.COMM_RetryCounter__c = 0;
        controlRecord.COMM_DocumentMonth__c = System.now().addMonths(-1).month();
        controlRecord.COMM_DocumentYear__c = System.now().addMonths(-1).year();
        expectedInsertList.add(controlRecord);

        //Mock Queries
        MOCKS.startStubbing();
        MOCKS.when(ACCOUNT_REP.getAccountsByIdsWithInvoicesAndCreditMemos(new Set<Id>{ accountList.get(0).Id }, 'CreatedDate = N_MONTHS_AGO:1'))
            .thenReturn(accountList);
        MOCKS.when(ORDER_ITEM_ADJUSTMENT_REP.getOrderItemAdjustLineSumByOrderItemSummaryIds((Set<Id>) fflib_Match.anyObject()))
            .thenReturn(new List<OrderItemAdjustmentLineSummary>());
        MOCKS.when(FISCAL_CONTROL_REP.updateSObjects((List<COMM_MonthlyFiscalDocumentControl__c>) fflib_Match.anyList()))
            .thenReturn(new List<Database.SaveResult>());
        MOCKS.when(INVOICE_REP.getForSAPInvoice(new Set<Id>{ invoiceList.get(0).Id }, 'CreatedDate = N_MONTHS_AGO:1')).thenReturn(invoiceList);
        MOCKS.when(INVOICE_REP.updateSObjects(invoiceList)).thenReturn(new List<Database.SaveResult>());
        MOCKS.when(CREDITMEMO_REP.getForSAPCreditMemo(new Set<Id>{ creditMemoList.get(0).Id }, 'CreatedDate = N_MONTHS_AGO:1'))
            .thenReturn(creditMemoList);
        MOCKS.when(CREDITMEMO_REP.updateSObjects(creditMemoList)).thenReturn(new List<Database.SaveResult>());
        MOCKS.when(JOB_EXECUTION_REP.getJobExecWithBatchDefinitionsByIdSet((Set<Id>) fflib_match.anyObject())).thenReturn(jobExecutionList);
        MOCKS.when(JOB_EXECUTION_REP.getJobExecutionByAsyncApexJobIdSet((Id) fflib_match.anyObject())).thenReturn(jobExecutionList);
        MOCKS.when(PARAMETERS_REP.getParametersByParentId((Set<Id>) fflib_match.anyObject())).thenReturn(parametersList);
        MOCKS.stopStubbing();

        //Start Test
        Test.startTest();
        COMM_Async_SAPSendInvoiceAndCreditMemo newBatchRun = new COMM_Async_SAPSendInvoiceAndCreditMemo();
        newBatchRun = new COMM_Async_SAPSendInvoiceAndCreditMemo(
            JOB_EXECUTION_REP,
            PARAMETERS_REP,
            ACCOUNT_REP,
            INVOICE_REP,
            CREDITMEMO_REP,
            FISCAL_CONTROL_REP,
            ORDER_ITEM_ADJUSTMENT_REP
        );
        newBatchRun.execute(null, expectedInsertList);
        newBatchRun.setAsyncApexJobId(null);
        Test.stopTest();

        //Verify Results
        ((COMM_IREP_Account) mocks.verify(ACCOUNT_REP, 1))
            .getAccountsByIdsWithInvoicesAndCreditMemos(new Set<Id>{ accountList.get(0).Id }, 'CreatedDate = N_MONTHS_AGO:1');
        ((COMM_IREP_MonthlyFiscalDocumentControl) mocks.verify(FISCAL_CONTROL_REP, 1)).updateSObjects(expectedInsertList);
    }
}