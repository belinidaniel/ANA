/**
 * @author Diogo Gonçalves
 * @description COMM_SL_CreateGiftCard class
 *
 * Modification Log
 * ------------------------------------------------------------------------------------
 * Developer        Date            Coverage(%)    Description
 * -----------------------------------------------------------------------------------
 * Diogo Gonçalves  19/04/2024      100             Original version
 * Daniel Reto      07/10/2024      80              Error test
 **/
@isTest
private class COMM_SL_CreateGiftCardTest {
    private static final String SUCCESS_RESPONSE = '{"created":[{"recipientName":"John Doe","recipientEmail":"john.doe@example.com","description":"Gift certificate for John Doe","senderName":"Jane Smith","orderNo":"ORD0011223344","amount":100.0,"sendEmail":true}]}';
    private static final String ERROR_RESPONSE = null;

    @TestSetup
    static void setup() {
        COMM_OMS_TestDataFactory.createOrderAndRelated();
    }

    @isTest
    static void testCreateGiftCard() {
        Test.setMock(HttpCalloutMock.class, new HttpResponseSuccessMock(SUCCESS_RESPONSE));

        // Validate that required data was generated by the flows
        List<OrderSummary> osList = [SELECT Id, status, (SELECT id FROM OrderItemSummaries) FROM OrderSummary];
        Assert.areEqual(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].id
        ];
        Assert.areEqual(ofList.isEmpty(), false, 'Order Fulfillment not found.');
        List<String> invoiceIds = new List<String>();
        List<Invoice> invoices = [SELECT Id FROM Invoice];
        for (Invoice invoice : invoices) {
            invoiceIds.add(invoice.Id);
        }
        Assert.isTrue(invoiceIds.size() > 0, 'No invoices were created');

        Test.startTest();
        COMM_SL_CreateGiftCard.createGiftCard(invoiceIds);
        Test.stopTest();
    }

    @isTest
    static void testCreateGiftCardWithError() {
        Test.setMock(HttpCalloutMock.class, new HttpResponseSuccessMock(ERROR_RESPONSE));

        // Validate that required data was generated by the flows
        List<OrderSummary> osList = [SELECT Id, status, (SELECT id FROM OrderItemSummaries) FROM OrderSummary];
        Assert.areEqual(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].id
        ];
        Assert.areEqual(ofList.isEmpty(), false, 'Order Fulfillment not found.');
        List<String> invoiceIds = new List<String>();
        List<Invoice> invoices = [SELECT Id FROM Invoice];
        for (Invoice invoice : invoices) {
            invoiceIds.add(invoice.Id);
        }
        Assert.isTrue(invoiceIds.size() > 0, 'No invoices were created');

        Test.startTest();
        COMM_SL_CreateGiftCard.createGiftCard(invoiceIds);
        Test.stopTest();

        Assert.areEqual(1, [SELECT COUNT() FROM ProcessException WHERE Category =: COMM_DO_ProcessExceptions.GIFTCARD_CATEGORY]);
    }
}