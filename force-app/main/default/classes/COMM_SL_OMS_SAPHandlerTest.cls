/**
 * @author Rui Salgado
 * @description COMM_SL_OMS_SAPHandler test class
 *
 * Modification Log
 * ------------------------------------------------------------------------------------
 * Developer        Date            Coverage(%)    Description
 * -----------------------------------------------------------------------------------
 * Rui Salgado      16/05/2024      75             Original version
 * Daniel Reto      06/06/2024      80             ECOMM-307
 **/
@isTest
private class COMM_SL_OMS_SAPHandlerTest {
    private static final String DUMMYDOCID = 'SAP-DUMMY-DOC-ID';

    @testSetup
    static void setup() {
        Id orderId = COMM_OMS_TestDataFactory.createSimpleOrderWithDiscount();
    }

    /**
     * @description Mock class for HTTP Callouts
     */
    public class HttpResponseSuccessMock implements HttpCalloutMock {
        /**
         * @description Method to setup HTTP Callout response mock
         *
         * @param request HTTP request for mock
         * @return mock HTTP response
         */
        public HttpResponse respond(HttpRequest request) {
            // Prepare responseBody mock
            COMM_SL_SAPDocumentResponse sapResp = new COMM_SL_SAPDocumentResponse();
            sapResp.documentId = DUMMYDOCID;
            sapResp.resultCode = '';
            sapResp.resultDesc = null;
            String responseBody = JSON.serialize(sapResp);

            // set response
            HttpResponse response = new HttpResponse();
            response.setHeader('Content-Type', 'application/json');
            response.setBody(responseBody);
            response.setStatusCode(200);
            return response;
        }
    }

    public class HttpResponseWithErrorsMock implements HttpCalloutMock {
        /**
         * @description Method to setup HTTP Callout response mock
         *
         * @param request HTTP request for mock
         * @return mock HTTP response
         */
        public HttpResponse respond(HttpRequest request) {
            // Prepare responseBody mock
            COMM_SL_SAPDocumentResponse sapResp = new COMM_SL_SAPDocumentResponse();
            sapResp.documentId = null;
            sapResp.resultCode = 'FAIL';
            sapResp.resultDesc = 'Failed to process request';
            String responseBody = JSON.serialize(sapResp);

            // set response
            HttpResponse response = new HttpResponse();
            response.setHeader('Content-Type', 'application/json');
            response.setBody(responseBody);
            response.setStatusCode(200);
            return response;
        }
    }

    public class HttpResponseFailMock implements HttpCalloutMock {
        /**
         * @description Method to setup HTTP Callout response mock
         *
         * @param request HTTP request for mock
         * @return mock HTTP response
         */
        public HttpResponse respond(HttpRequest request) {
            // Prepare responseBody mock
            COMM_SL_SAPDocumentResponse sapResp = new COMM_SL_SAPDocumentResponse();
            sapResp.documentId = null;
            sapResp.resultCode = 'SAP_ERROR';
            sapResp.resultDesc = 'Failed to process request';
            String responseBody = JSON.serialize(sapResp);

            // set response
            HttpResponse response = new HttpResponse();
            response.setHeader('Content-Type', 'application/json');
            response.setBody(responseBody);
            response.setStatusCode(500);
            return response;
        }
    }

    public class HttpResponseNullMock implements HttpCalloutMock {
        /**
         * @description Method to setup HTTP Callout response mock
         *
         * @param request HTTP request for mock
         * @return mock HTTP response
         */
        public HttpResponse respond(HttpRequest request) {
            HttpResponse response = new HttpResponse();
            response.setHeader('Content-Type', 'application/json');
            response.setBody(null);
            response.setStatusCode(500);
            return response;
        }
    }

    @isTest
    static void doCallSuccessTest() {
        // scenario: Callout SAP and get a 200 response with some errors in response
        // expected: No errors logged in ProcessException

        // Validate that required data was generated by the flows
        List<OrderSummary> osList = [SELECT Id, status, (SELECT id FROM OrderItemSummaries) FROM OrderSummary];
        System.assertEquals(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].id
        ];
        System.assertEquals(ofList.isEmpty(), false, 'Order Fulfillment not found.');
        List<Invoice> invcList = [SELECT Id, status, balance, (SELECT id FROM InvoiceLines) FROM Invoice WHERE ReferenceEntityId = :osList[0].id];
        System.assertEquals(invcList.isEmpty(), false, 'Invoice not found.');
        List<Id> incoiceIdList = new List<Id>();
        for (Invoice invc : invcList) {
            incoiceIdList.add(invc.id);
        }

        // call method
        Test.startTest();
        Test.setMock(HttpCalloutMock.class, new HttpResponseSuccessMock());
        COMM_SL_OMS_SAPHandler.invocableMethod(incoiceIdList);
        Test.stopTest();

        // Check if any errors were generated
        List<ProcessException> processExceptionList = [SELECT Id FROM ProcessException WHERE Category = 'SAP'];
        System.assertEquals(processExceptionList.isEmpty(), true, 'Errors found in ProcessException object.');
    }

    @isTest
    static void doCallSuccessWithErrorsTest() {
        // scenario: Callout SAP and get a 200 response with some errors in response
        // expected: Errors logged in ProcessException

        // Validate that required data was generated by the flows
        List<OrderSummary> osList = [SELECT Id, status, (SELECT id FROM OrderItemSummaries) FROM OrderSummary];
        System.assertEquals(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].id
        ];
        System.assertEquals(ofList.isEmpty(), false, 'Order Fulfillment not found.');
        List<Invoice> invcList = [SELECT Id, status, balance, (SELECT id FROM InvoiceLines) FROM Invoice WHERE ReferenceEntityId = :osList[0].id];
        System.assertEquals(invcList.isEmpty(), false, 'Invoice not found.');
        List<Id> incoiceIdList = new List<Id>();
        for (Invoice invc : invcList) {
            incoiceIdList.add(invc.id);
        }

        // call method
        Test.startTest();
        Test.setMock(HttpCalloutMock.class, new HttpResponseWithErrorsMock());
        COMM_SL_OMS_SAPHandler.doCall(incoiceIdList);
        Test.stopTest();

        // Check if any errors were generated
        List<ProcessException> processExceptionList = [SELECT Id FROM ProcessException];
        System.assertEquals(processExceptionList.isEmpty(), false, 'Expected errors to be logged in ProcessException object.');
    }

    @isTest
    static void doCallFailTest() {
        // scenario: Callout SAP and get a 500 response
        // expected: Callout error logged in ProcessException

        // Validate that required data was generated by the flows
        List<OrderSummary> osList = [SELECT Id, status, (SELECT id FROM OrderItemSummaries) FROM OrderSummary];
        System.assertEquals(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].id
        ];
        System.assertEquals(ofList.isEmpty(), false, 'Order Fulfillment not found.');
        List<Invoice> invcList = [SELECT Id, status, balance, (SELECT id FROM InvoiceLines) FROM Invoice WHERE ReferenceEntityId = :osList[0].id];
        System.assertEquals(invcList.isEmpty(), false, 'Invoice not found.');
        List<Id> incoiceIdList = new List<Id>();
        for (Invoice invc : invcList) {
            incoiceIdList.add(invc.id);
        }

        // call method
        Test.startTest();
        Test.setMock(HttpCalloutMock.class, new HttpResponseFailMock());
        COMM_SL_OMS_SAPHandler.doCall(incoiceIdList);
        COMM_SL_OMS_SAPHandler.doCallNotFuture(incoiceIdList);
        List<ProcessException> processExceptionList = [SELECT Id FROM ProcessException];
        Test.stopTest();

        // Check if any errors were generated
        System.assertEquals(processExceptionList.isEmpty(), false, 'Expected errors to be logged in ProcessException object.');
    }

    @isTest
    static void doCallFailNoResponseTest() {
        // scenario: Callout SAP and get null response
        // expected: Callout error logged in ProcessException

        // Validate that required data was generated by the flows
        List<OrderSummary> osList = [SELECT Id, status, (SELECT id FROM OrderItemSummaries) FROM OrderSummary];
        System.assertEquals(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].id
        ];
        System.assertEquals(ofList.isEmpty(), false, 'Order Fulfillment not found.');
        List<Invoice> invcList = [SELECT Id, status, balance, (SELECT id FROM InvoiceLines) FROM Invoice WHERE ReferenceEntityId = :osList[0].id];
        System.assertEquals(invcList.isEmpty(), false, 'Invoice not found.');
        List<Id> incoiceIdList = new List<Id>();
        for (Invoice invc : invcList) {
            incoiceIdList.add(invc.id);
        }

        // call method
        Test.startTest();
        Test.setMock(HttpCalloutMock.class, new HttpResponseNullMock());
        COMM_SL_OMS_SAPHandler.doCall(incoiceIdList);
        Test.stopTest();

        // Check if any errors were generated
        List<ProcessException> processExceptionList = [SELECT Id FROM ProcessException];
        System.assertEquals(processExceptionList.isEmpty(), false, 'Expected errors to be logged in ProcessException object.');
    }

    @isTest
    static void doCallSuccessCreditMemoTest() {
        // scenario: Callout SAP and get a 200 response with some errors in response
        // expected: No errors logged in ProcessException

        // Validate that required data was generated by the flows
        List<OrderSummary> osList = [SELECT Id, Status, (SELECT Id FROM OrderItemSummaries) FROM OrderSummary];
        System.assertEquals(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, Status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].Id
        ];

        String orderProductSummaryIds = '';
        for (OrderItemSummary OrderItemSummaryRecord : osList[0].OrderItemSummaries) {
            orderProductSummaryIds += OrderItemSummaryRecord.Id + ',';
        }

        Map<String, Object> params = new Map<String, Object>();
        params.put('returnedOrderSummaryId', osList[0].Id);
        params.put('returnedOrderProductSummaryIds', orderProductSummaryIds.removeEnd(','));

        Flow.Interview.COMM_OMS_Cancel_Item cancelItemFlow = new Flow.Interview.COMM_OMS_Cancel_Item(params);
        cancelItemFlow.start();

        System.assertEquals(ofList.isEmpty(), false, 'Order Fulfillment not found.');
        List<CreditMemo> creditMemoList = [
            SELECT Id, Status, Balance, (SELECT Id FROM CreditMemoLines)
            FROM CreditMemo
            WHERE ReferenceEntityId = :osList[0].Id
        ];
        System.assertEquals(creditMemoList.isEmpty(), false, 'CreditMemo not found.');
        List<Id> creditMemoIdList = new List<Id>();
        for (CreditMemo creditMemoRecord : creditMemoList) {
            creditMemoIdList.add(creditMemoRecord.Id);
        }

        // call method
        Test.startTest();
        Test.setMock(HttpCalloutMock.class, new HttpResponseSuccessMock());
        COMM_SL_OMS_SAPHandler.invocableMethod(creditMemoIdList);
        Test.stopTest();

        // Check if any errors were generated
        List<ProcessException> processExceptionList = [SELECT Id, AttachedToId, OrderSummaryId, Message FROM ProcessException WHERE Category = 'SAP'];
        System.assertEquals(processExceptionList.isEmpty(), true, 'Errors found in ProcessException object: ' + processExceptionList);
    }

    @isTest
    static void doCallSuccessWithErrorsCreditMemoTest() {
        // scenario: Callout SAP and get a 200 response with some errors in response
        // expected: Errors logged in ProcessException

        // Validate that required data was generated by the flows
        List<OrderSummary> osList = [SELECT Id, Status, (SELECT Id FROM OrderItemSummaries) FROM OrderSummary];
        System.assertEquals(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, Status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].Id
        ];

        String orderProductSummaryIds = '';
        for (OrderItemSummary OrderItemSummaryRecord : osList[0].OrderItemSummaries) {
            orderProductSummaryIds += OrderItemSummaryRecord.Id + ',';
        }

        Map<String, Object> params = new Map<String, Object>();
        params.put('returnedOrderSummaryId', osList[0].Id);
        params.put('returnedOrderProductSummaryIds', orderProductSummaryIds.removeEnd(','));

        Flow.Interview.COMM_OMS_Cancel_Item cancelItemFlow = new Flow.Interview.COMM_OMS_Cancel_Item(params);
        cancelItemFlow.start();

        System.assertEquals(ofList.isEmpty(), false, 'Order Fulfillment not found.');
        List<CreditMemo> creditMemoList = [
            SELECT Id, Status, Balance, (SELECT Id FROM CreditMemoLines)
            FROM CreditMemo
            WHERE ReferenceEntityId = :osList[0].Id
        ];
        System.assertEquals(creditMemoList.isEmpty(), false, 'CreditMemo not found.');
        List<Id> creditMemoIdList = new List<Id>();
        for (CreditMemo creditMemoRecord : creditMemoList) {
            creditMemoIdList.add(creditMemoRecord.Id);
        }

        // call method
        Test.startTest();
        Test.setMock(HttpCalloutMock.class, new HttpResponseWithErrorsMock());
        COMM_SL_OMS_SAPHandler.doCall(creditMemoIdList);
        Test.stopTest();

        // Check if any errors were generated
        List<ProcessException> processExceptionList = [SELECT Id FROM ProcessException];
        System.assertEquals(processExceptionList.isEmpty(), false, 'Expected errors to be logged in ProcessException object.');
    }

    @isTest
    static void doCallFailCreditMemoTest() {
        // scenario: Callout SAP and get a 500 response
        // expected: Callout error logged in ProcessException

        // Validate that required data was generated by the flows
        List<OrderSummary> osList = [SELECT Id, Status, (SELECT Id FROM OrderItemSummaries) FROM OrderSummary];
        System.assertEquals(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, Status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].Id
        ];

        String orderProductSummaryIds = '';
        for (OrderItemSummary OrderItemSummaryRecord : osList[0].OrderItemSummaries) {
            orderProductSummaryIds += OrderItemSummaryRecord.Id + ',';
        }

        Map<String, Object> params = new Map<String, Object>();
        params.put('returnedOrderSummaryId', osList[0].Id);
        params.put('returnedOrderProductSummaryIds', orderProductSummaryIds.removeEnd(','));

        Flow.Interview.COMM_OMS_Cancel_Item cancelItemFlow = new Flow.Interview.COMM_OMS_Cancel_Item(params);
        cancelItemFlow.start();

        System.assertEquals(ofList.isEmpty(), false, 'Order Fulfillment not found.');
        List<CreditMemo> creditMemoList = [
            SELECT Id, Status, Balance, (SELECT Id FROM CreditMemoLines)
            FROM CreditMemo
            WHERE ReferenceEntityId = :osList[0].Id
        ];
        System.assertEquals(creditMemoList.isEmpty(), false, 'CreditMemo not found.');
        List<Id> creditMemoIdList = new List<Id>();
        for (CreditMemo creditMemoRecord : creditMemoList) {
            creditMemoIdList.add(creditMemoRecord.Id);
        }

        // call method
        Test.startTest();
        Test.setMock(HttpCalloutMock.class, new HttpResponseFailMock());
        COMM_SL_OMS_SAPHandler.doCall(creditMemoIdList);
        Test.stopTest();

        // Check if any errors were generated
        List<ProcessException> processExceptionList = [SELECT Id FROM ProcessException];
        System.assertEquals(processExceptionList.isEmpty(), false, 'Expected errors to be logged in ProcessException object.');
    }

    @isTest
    static void doCallFailNoResponseCreditMemoTest() {
        // scenario: Callout SAP and get null response
        // expected: Callout error logged in ProcessException

        // Validate that required data was generated by the flows
        List<OrderSummary> osList = [SELECT Id, Status, (SELECT Id FROM OrderItemSummaries) FROM OrderSummary];
        System.assertEquals(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, Status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].Id
        ];

        String orderProductSummaryIds = '';
        for (OrderItemSummary OrderItemSummaryRecord : osList[0].OrderItemSummaries) {
            orderProductSummaryIds += OrderItemSummaryRecord.Id + ',';
        }

        Map<String, Object> params = new Map<String, Object>();
        params.put('returnedOrderSummaryId', osList[0].Id);
        params.put('returnedOrderProductSummaryIds', orderProductSummaryIds.removeEnd(','));

        Flow.Interview.COMM_OMS_Cancel_Item cancelItemFlow = new Flow.Interview.COMM_OMS_Cancel_Item(params);
        cancelItemFlow.start();

        System.assertEquals(ofList.isEmpty(), false, 'Order Fulfillment not found.');
        List<CreditMemo> creditMemoList = [
            SELECT Id, Status, Balance, (SELECT Id FROM CreditMemoLines)
            FROM CreditMemo
            WHERE ReferenceEntityId = :osList[0].Id
        ];
        System.assertEquals(creditMemoList.isEmpty(), false, 'CreditMemo not found.');
        List<Id> creditMemoIdList = new List<Id>();
        for (CreditMemo creditMemoRecord : creditMemoList) {
            creditMemoIdList.add(creditMemoRecord.Id);
        }

        // call method
        Test.startTest();
        Test.setMock(HttpCalloutMock.class, new HttpResponseNullMock());
        COMM_SL_OMS_SAPHandler.doCall(creditMemoIdList);
        Test.stopTest();

        // Check if any errors were generated
        List<ProcessException> processExceptionList = [SELECT Id FROM ProcessException];
        System.assertEquals(processExceptionList.isEmpty(), false, 'Expected errors to be logged in ProcessException object.');
    }

    @isTest
    static void doCallSuccessCreditPaymentTest() {
        // scenario: Callout SAP and get a 200 response with some errors in response
        // expected: No errors logged in ProcessException

        // Validate that required data was generated by the flows
        List<OrderSummary> osList = [SELECT Id, Status, (SELECT Id FROM OrderItemSummaries) FROM OrderSummary];
        System.assertEquals(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, Status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].Id
        ];

        String orderProductSummaryIds = '';
        for (OrderItemSummary OrderItemSummaryRecord : osList[0].OrderItemSummaries) {
            orderProductSummaryIds += OrderItemSummaryRecord.Id + ',';
        }

        Map<String, Object> params = new Map<String, Object>();
        params.put('returnedOrderSummaryId', osList[0].Id);
        params.put('returnedOrderProductSummaryIds', orderProductSummaryIds.removeEnd(','));

        Flow.Interview.COMM_OMS_Cancel_Item cancelItemFlow = new Flow.Interview.COMM_OMS_Cancel_Item(params);
        cancelItemFlow.start();

        System.assertEquals(ofList.isEmpty(), false, 'Order Fulfillment not found.');
        List<Invoice> invoiceIdList = [SELECT Id FROM Invoice WHERE ReferenceEntityId = :osList[0].id];
        System.assertEquals(invoiceIdList.isEmpty(), false, 'Invoice not found.');
        List<Id> incoiceIdSet = new List<Id>();
        for (Invoice invc : invoiceIdList) {
            incoiceIdSet.add(invc.id);
        }
        List<Invoice> invoiceList = (List<Invoice>) Database.query(
            'SELECT ' +
                'Id, ' +
                'Status, ' +
                'DocumentNumber, ' +
                'DueDate, ' +
                'TotalAmount, ' +
                'COMM_SAPCount__c, ' +
                'TotalTaxAmount, ' +
                'BillingAccountId, ' +
                'BillingAccount.Name, ' +
                'BillingAccount.COMM_Email__c, ' +
                'BillingAccount.COMM_VATNumber__c, ' +
                'TYPEOF ReferenceEntity ' +
                'WHEN OrderSummary THEN ' +
                'ID, ' +
                'SalesChannel.SalesChannelName, ' +
                'COMM_SalesType__c, ' +
                'OrderedDate, ' +
                'BillingStreet, ' +
                'BillingPostalCode, ' +
                'BillingCity, ' +
                'BillingCountryCode ' +
                'END, ' +
                '( ' +
                'SELECT ' +
                'Id, ' +
                'Product2.Id, ' +
                'Product2.StockKeepingUnit, ' +
                'Product2.COMM_SAPLocation__c, ' +
                'Product2.COMM_Tax__c, ' +
                'TYPEOF ReferenceEntityItem ' +
                'WHEN OrderItemSummary THEN Description ' +
                'END, ' +
                'Quantity, ' +
                'LineAmount, ' +
                'RelatedLineId, ' +
                'ReferenceEntityItemType, ' +
                'Type ' +
                'FROM InvoiceLines ' +
                ') ' +
                'FROM Invoice ' +
                'WHERE ' +
                'Id IN :incoiceIdSet'
        );
        System.assertEquals(invoiceList.isEmpty(), false, 'Invoice not found.');

        List<CreditMemo> creditMemoIdList = [SELECT Id FROM CreditMemo WHERE ReferenceEntityId = :osList[0].Id];
        System.assertEquals(creditMemoIdList.isEmpty(), false, 'CreditMemo not found.');
        Set<Id> creditMemoIdSet = new Set<Id>();
        for (CreditMemo creditMemoRecord : creditMemoIdList) {
            creditMemoIdSet.add(creditMemoRecord.Id);
        }
        List<CreditMemo> creditMemoList = (List<CreditMemo>) Database.query(
            'SELECT ' +
                'Id, ' +
                'Status, ' +
                'DocumentNumber, ' +
                'CreditDate, ' +
                'TotalAmount, ' +
                'COMM_SAPCount__c, ' +
                'TotalTaxAmount, ' +
                'BillingAccountId, ' +
                'BillingAccount.Name, ' +
                'BillingAccount.COMM_Email__c, ' +
                'BillingAccount.COMM_VATNumber__c, ' +
                'TYPEOF ReferenceEntity ' +
                'WHEN OrderSummary THEN ' +
                'ID, ' +
                'SalesChannel.SalesChannelName, ' +
                'COMM_SalesType__c, ' +
                'OrderedDate, ' +
                'BillingStreet, ' +
                'BillingPostalCode, ' +
                'BillingCity, ' +
                'BillingCountryCode ' +
                'END, ' +
                '( ' +
                'SELECT ' +
                'Id, ' +
                'Product2.Id, ' +
                'Product2.StockKeepingUnit, ' +
                'Product2.COMM_SAPLocation__c, ' +
                'Product2.COMM_Tax__c, ' +
                'TYPEOF ReferenceEntityItem ' +
                'WHEN OrderItemSummary THEN Description ' +
                'END, ' +
                'LineAmount, ' +
                'RelatedLineId, ' +
                'ReferenceEntityItemType, ' +
                'Type ' +
                'FROM CreditMemoLines ' +
                ') ' +
                'FROM CreditMemo ' +
                'WHERE ' +
                'Id IN :creditMemoIdSet'
        );
        System.assertEquals(creditMemoList.isEmpty(), false, 'CreditMemo not found.');
        String query = new FW_QueryBuilder(Account.sObjectType)
            .selectFields(
                new List<SObjectField>{
                    Account.Id,
                    Account.BillingStreet,
                    Account.BillingPostalCode,
                    Account.BillingCity,
                    Account.BillingCountryCode,
                    Account.COMM_BillingFirstName__c,
                    Account.COMM_BillingLastName__c,
                    Account.COMM_VATNumber__c,
                    Account.IsPersonAccount,
                    Account.Name,
                    Account.PersonEmail,
                    Account.COMM_Email__c,
                    Account.COMM_StaffCompanyRatio__c,
                    Account.COMM_OfficialEntityRatio__c
                }
            )
            .selectSubquery('Invoices', new List<SObjectField>{ Invoice.Id })
            .getParent()
            .selectSubquery('CreditMemos', new List<SObjectField>{ CreditMemo.Id })
            .getParent()
            .getQuery();
        List<Account> accountList = Database.query(query);
        System.assertEquals(accountList.isEmpty(), false, 'Account not found.');
        accountList.get(0).BillingCountryCode = 'GB';

        // call method
        Test.startTest();
        Test.setMock(HttpCalloutMock.class, new HttpResponseSuccessMock());
        COMM_SL_OMS_SAPHandler.buildCreditPaymentsRequest(
            accountList.get(0),
            invoiceList,
            creditMemoList,
            DateTime.newInstance(Date.today().year(), Date.today().month(), 1),
            new List<Invoice>(),
            new List<CreditMemo>(),
            true,
            new Map<String, String>()
        );
        Test.stopTest();

        // Check if any errors were generated
        List<ProcessException> processExceptionList = [SELECT Id, AttachedToId, OrderSummaryId, Message FROM ProcessException WHERE Category = 'SAP'];
        System.assertEquals(processExceptionList.isEmpty(), true, 'Errors found in ProcessException object: ' + processExceptionList);
    }

    @isTest
    static void doCallAndHandleResponseTest() {
        // scenario: Callout SAP and get a 200 response with some errors in response
        // expected: No errors logged in ProcessException

        // Validate that required data was generated by the flows
        List<OrderSummary> osList = [SELECT Id, Status, (SELECT Id FROM OrderItemSummaries) FROM OrderSummary];
        System.assertEquals(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, Status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].Id
        ];

        String orderProductSummaryIds = '';
        for (OrderItemSummary OrderItemSummaryRecord : osList[0].OrderItemSummaries) {
            orderProductSummaryIds += OrderItemSummaryRecord.Id + ',';
        }

        Map<String, Object> params = new Map<String, Object>();
        params.put('returnedOrderSummaryId', osList[0].Id);
        params.put('returnedOrderProductSummaryIds', orderProductSummaryIds.removeEnd(','));

        Flow.Interview.COMM_OMS_Cancel_Item cancelItemFlow = new Flow.Interview.COMM_OMS_Cancel_Item(params);
        cancelItemFlow.start();

        System.assertEquals(ofList.isEmpty(), false, 'Order Fulfillment not found.');
        List<Invoice> invoiceIdList = [SELECT Id FROM Invoice WHERE ReferenceEntityId = :osList[0].id];
        System.assertEquals(invoiceIdList.isEmpty(), false, 'Invoice not found.');
        List<Id> incoiceIdSet = new List<Id>();
        for (Invoice invc : invoiceIdList) {
            incoiceIdSet.add(invc.id);
        }
        List<Invoice> invoiceList = (List<Invoice>) Database.query(
            'SELECT ' +
                'Id, ' +
                'Status, ' +
                'DocumentNumber, ' +
                'DueDate, ' +
                'TotalAmount, ' +
                'COMM_SAPCount__c, ' +
                'TotalTaxAmount, ' +
                'BillingAccountId, ' +
                'BillingAccount.Name, ' +
                'BillingAccount.COMM_Email__c, ' +
                'BillingAccount.COMM_VATNumber__c, ' +
                'TYPEOF ReferenceEntity ' +
                'WHEN OrderSummary THEN ' +
                'ID, ' +
                'SalesChannel.SalesChannelName, ' +
                'COMM_SalesType__c, ' +
                'OrderedDate, ' +
                'BillingStreet, ' +
                'BillingPostalCode, ' +
                'BillingCity, ' +
                'BillingCountryCode ' +
                'END, ' +
                '( ' +
                'SELECT ' +
                'Id, ' +
                'Product2.Id, ' +
                'Product2.StockKeepingUnit, ' +
                'Product2.COMM_SAPLocation__c, ' +
                'Product2.COMM_Tax__c, ' +
                'TYPEOF ReferenceEntityItem ' +
                'WHEN OrderItemSummary THEN Description ' +
                'END, ' +
                'Quantity, ' +
                'LineAmount, ' +
                'RelatedLineId, ' +
                'ReferenceEntityItemType, ' +
                'Type ' +
                'FROM InvoiceLines ' +
                ') ' +
                'FROM Invoice ' +
                'WHERE ' +
                'Id IN :incoiceIdSet'
        );
        System.assertEquals(invoiceList.isEmpty(), false, 'Invoice not found.');

        List<CreditMemo> creditMemoIdList = [SELECT Id FROM CreditMemo WHERE ReferenceEntityId = :osList[0].Id];
        System.assertEquals(creditMemoIdList.isEmpty(), false, 'CreditMemo not found.');
        Set<Id> creditMemoIdSet = new Set<Id>();
        for (CreditMemo creditMemoRecord : creditMemoIdList) {
            creditMemoIdSet.add(creditMemoRecord.Id);
        }
        List<CreditMemo> creditMemoList = (List<CreditMemo>) Database.query(
            'SELECT ' +
                'Id, ' +
                'Status, ' +
                'DocumentNumber, ' +
                'CreditDate, ' +
                'TotalAmount, ' +
                'COMM_SAPCount__c, ' +
                'TotalTaxAmount, ' +
                'BillingAccountId, ' +
                'BillingAccount.Name, ' +
                'BillingAccount.COMM_Email__c, ' +
                'BillingAccount.COMM_VATNumber__c, ' +
                'TYPEOF ReferenceEntity ' +
                'WHEN OrderSummary THEN ' +
                'ID, ' +
                'SalesChannel.SalesChannelName, ' +
                'COMM_SalesType__c, ' +
                'OrderedDate, ' +
                'BillingStreet, ' +
                'BillingPostalCode, ' +
                'BillingCity, ' +
                'BillingCountryCode ' +
                'END, ' +
                '( ' +
                'SELECT ' +
                'Id, ' +
                'Product2.Id, ' +
                'Product2.StockKeepingUnit, ' +
                'Product2.COMM_SAPLocation__c, ' +
                'Product2.COMM_Tax__c, ' +
                'TYPEOF ReferenceEntityItem ' +
                'WHEN OrderItemSummary THEN Description ' +
                'END, ' +
                'LineAmount, ' +
                'RelatedLineId, ' +
                'ReferenceEntityItemType, ' +
                'Type ' +
                'FROM CreditMemoLines ' +
                ') ' +
                'FROM CreditMemo ' +
                'WHERE ' +
                'Id IN :creditMemoIdSet'
        );
        System.assertEquals(creditMemoList.isEmpty(), false, 'CreditMemo not found.');
        String query = new FW_QueryBuilder(Account.sObjectType)
            .selectFields(
                new List<SObjectField>{
                    Account.Id,
                    Account.BillingStreet,
                    Account.BillingPostalCode,
                    Account.BillingCity,
                    Account.BillingCountryCode,
                    Account.COMM_BillingFirstName__c,
                    Account.COMM_BillingLastName__c,
                    Account.COMM_VATNumber__c,
                    Account.IsPersonAccount,
                    Account.Name,
                    Account.PersonEmail,
                    Account.COMM_Email__c,
                    Account.COMM_StaffCompanyRatio__c,
                    Account.COMM_OfficialEntityRatio__c
                }
            )
            .selectSubquery('Invoices', new List<SObjectField>{ Invoice.Id })
            .getParent()
            .selectSubquery('CreditMemos', new List<SObjectField>{ CreditMemo.Id })
            .getParent()
            .getQuery();
        List<Account> accountList = Database.query(query);
        System.assertEquals(accountList.isEmpty(), false, 'Account not found.');
        accountList.get(0).BillingCountryCode = 'GB';

        COMM_SL_SAPDocumentRequest request = COMM_SL_SAPDocumentRequest.parse(
            '{"vatDifferenceAmount":0.04,"taxAmout":16.18,"paymentMode":"Credit","paymentDays":30,"orderItems":[{"totalNetAmount":20.00,"taxCode":"PP","quantity":1.00,"productId":"ASC-1","location":"ASC-1","itemReference":null,"description":"Porto Lounge"},{"totalNetAmount":10.00,"taxCode":"PP","quantity":1.00,"productId":"ASC-84","location":"ASC-84","itemReference":null,"description":"Porto Lounge"},{"totalNetAmount":79.20,"taxCode":"PP","quantity":1.00,"productId":"ASC-84","location":"ASC-84","itemReference":null,"description":"Porto Fast Track"},{"totalNetAmount":-15.84,"taxCode":"PP","quantity":1.00,"productId":"ASC-84","location":"ASC-84","itemReference":null,"description":"Porto Fast Track"},{"totalNetAmount":255.20,"taxCode":"PP","quantity":1.00,"productId":"ASC-1","location":"ASC-1","itemReference":null,"description":"Porto Lounge"},{"totalNetAmount":-51.04,"taxCode":"PP","quantity":1.00,"productId":"ASC-1","location":"ASC-1","itemReference":null,"description":"Porto Lounge"},{"totalNetAmount":-20.00,"taxCode":"PP","quantity":1,"productId":"ASC-1","location":"ASC-1","itemReference":null,"description":"Porto Lounge"}],"netAmount":287.51,"id":"DOC-000000006","dueDate":null,"documentType":"Invoice","documentSerie":"FT","documentDate":"2024-06-01","billingVat":"PT500000000","billingPostalCode":"1111-111","billingName":"Test DR 202406051012","billingEmail":"daniel-alexandre.reto@capgemini.com","billingDate":"2024-06-06","billingCountry":"PT","billingCity":"Evora","billingAddress":"Test","billingAddicionalName":null}'
        );

        // call method
        Test.startTest();
        Test.setMock(HttpCalloutMock.class, new HttpResponseSuccessMock());
        COMM_SL_SAPDocumentResponse response = COMM_SL_OMS_SAPHandler.DoCallAndHandleResponse(request, invoiceList, new List<Invoice>());
        Test.stopTest();

        // Check if any errors were generated
        List<ProcessException> processExceptionList = [SELECT Id, AttachedToId, OrderSummaryId, Message FROM ProcessException WHERE Category = 'SAP'];
        System.assertEquals(response.documentId, DUMMYDOCID, 'Errors found in ProcessException object: ' + processExceptionList);
    }
}