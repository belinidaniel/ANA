/**
 * @author Diogo Gonçalves
 * @description COMM_SL_SendVouchersEmail test class
 *
 * Modification Log
 * ------------------------------------------------------------------------------------
 * Developer        Date            Coverage(%)    Description
 * -----------------------------------------------------------------------------------
 * Diogo Gonçalves  09/04/2024      90             Original version
 **/
@isTest
private class COMM_SL_SendVouchersEmailTest {
    @TestSetup
    static void setup() {
        COMM_OMS_TestDataFactory.createOrderAndRelated();
    }

    @isTest
    static void testSendVouchers() {
        // Validate that required data was generated by the flows
        List<OrderSummary> osList = [SELECT Id, status, (SELECT id FROM OrderItemSummaries) FROM OrderSummary];
        Assert.areEqual(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].id
        ];
        Assert.areEqual(ofList.isEmpty(), false, 'Order Fulfillment not found.');
        List<String> invoiceIds = new List<String>();
        List<Invoice> invoices = [SELECT Id FROM Invoice];
        for (Invoice invoice : invoices) {
            invoiceIds.add(invoice.Id);
        }
        Assert.isTrue(invoiceIds.size() > 0, 'No invoices were created');

        Integer emailInvocationStart = Limits.getEmailInvocations();
        Test.startTest();
        COMM_SL_SendVouchersEmail.sendVouchers(invoiceIds);
        Boolean emailSent = Limits.getEmailInvocations() != emailInvocationStart;
        Test.stopTest();

        Assert.isTrue(emailSent, 'Expected an email invocation to be called');
    }

    @isTest
    static void testSendVouchersException() {
        List<OrderSummary> osList = [SELECT Id, status, (SELECT id FROM OrderItemSummaries) FROM OrderSummary];
        Assert.areEqual(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].id
        ];
        Assert.areEqual(ofList.isEmpty(), false, 'Order Fulfillment not found.');
        List<String> invoiceIds = new List<String>();
        List<Invoice> invoices = [SELECT Id FROM Invoice];
        for (Invoice invoice : invoices) {
            invoiceIds.add(invoice.Id);
        }
        Assert.isTrue(invoiceIds.size() > 0, 'No invoices were created');
        update new OrderSummary(Id = osList[0].Id, COMM_Language__c = '');

        Test.startTest();
        COMM_SL_SendVouchersEmail.sendVouchers(invoiceIds);
        Boolean emailSent = Limits.getEmailInvocations() == 0;
        Test.stopTest();

        Assert.isFalse(emailSent, 'Expected an email invocation NOT to be called');
        List<ProcessException> exceptions = [
            SELECT Id, Description, Category
            FROM ProcessException
            WHERE Category = :COMM_DO_ProcessExceptions.VOUCHER_CATEGORY
        ];
        Assert.areEqual(1, exceptions.size(), 'Process Exception should have been created');
    }

    @isTest
    static void testSendVouchersExceptionResolved() {
        List<OrderSummary> osList = [SELECT Id, status, (SELECT id FROM OrderItemSummaries) FROM OrderSummary];
        Assert.areEqual(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].id
        ];
        Assert.areEqual(ofList.isEmpty(), false, 'Order Fulfillment not found.');
        List<String> invoiceIds = new List<String>();
        List<Invoice> invoices = [SELECT Id FROM Invoice];
        for (Invoice invoice : invoices) {
            invoiceIds.add(invoice.Id);
        }
        Assert.isTrue(invoiceIds.size() > 0, 'No invoices were created');

        update new OrderSummary(Id = osList[0].Id, COMM_Language__c = '');
        COMM_SL_SendVouchersEmail.sendVouchers(invoiceIds);
        update new OrderSummary(Id = osList[0].Id, COMM_Language__c = 'en_US');

        Integer emailInvocationStart = Limits.getEmailInvocations();
        Test.startTest();
        COMM_SL_SendVouchersEmail.sendVouchers(invoiceIds);
        Boolean emailSent = Limits.getEmailInvocations() != emailInvocationStart;
        Test.stopTest();

        Assert.isFalse(emailSent, 'Expected an email invocation NOT to be called');
        List<ProcessException> exceptions = [SELECT Id, Status FROM ProcessException WHERE Category = :COMM_DO_ProcessExceptions.VOUCHER_CATEGORY];
        Assert.areEqual(1, exceptions.size(), 'Only 1 process exception should exist');
        Assert.areEqual(COMM_DO_ProcessExceptions.RESOLVED, exceptions[0].Status, 'The exception should be resolved');
    }
}