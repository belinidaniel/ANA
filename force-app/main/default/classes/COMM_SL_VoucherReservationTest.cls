/**
 * @author Diogo Gonçalves
 * @description COMM_SL_VoucherReservation test class
 *
 * Modification Log
 * ------------------------------------------------------------------------------------
 * Developer        Date            Coverage(%)    Description
 * -----------------------------------------------------------------------------------
 * Diogo Gonçalves  08/04/2024      82             Original version
 **/
@isTest
private class COMM_SL_VoucherReservationTest {
    private static final List<String> QRCODE_RESPONSE_DATA = new List<String>{
        '"content": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAA1JREFUGFdj+Gkf9x8ABmEClm+bvsMAAAAASUVORK5CYII="',
        '"fileType": "img/png"'
    };

    @TestSetup
    static void setup() {
        COMM_OMS_TestDataFactory.createOrderAndRelated();
    }

    @isTest
    static void testCreateReservationVouchers() {
        // Validate that required data was generated by the flows
        List<OrderSummary> osList = [SELECT Id, status, (SELECT id FROM OrderItemSummaries) FROM OrderSummary];
        Assert.areEqual(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].id
        ];
        Assert.areEqual(ofList.isEmpty(), false, 'Order Fulfillment not found.');
        List<String> invoiceIds = new List<String>();
        List<Invoice> invoices = [SELECT Id FROM Invoice];
        for (Invoice invoice : invoices) {
            invoiceIds.add(invoice.Id);
        }
        Assert.isTrue(invoiceIds.size() > 0, 'No invoices were created');

        Test.setMock(HttpCalloutMock.class, new HttpResponseSuccessMock('{' + String.join(QRCODE_RESPONSE_DATA, ',') + '}'));

        Test.startTest();
        List<String> successList = COMM_SL_VoucherReservation.createReservationVouchers(invoiceIds);
        Test.stopTest();

        List<OrderItemSummary> oisList = [
            SELECT Id, COMM_QRCode__c
            FROM OrderItemSummary
            WHERE COMM_QRCode__c != NULL
        ];

        Assert.areEqual(oisList.size(), 1, 'QR Codes were not created');
    }

    @isTest
    static void testCreateVouchersExceptionAndResolve() {
        // Validate that required data was generated by the flows
        List<OrderSummary> osList = [SELECT Id, status, (SELECT id FROM OrderItemSummaries WHERE Product2.Family = 'Fast Track') FROM OrderSummary];
        Assert.areEqual(osList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :osList[0].id
        ];
        Assert.areEqual(ofList.isEmpty(), false, 'Order Fulfillment not found.');
        List<String> invoiceIds = new List<String>();
        List<Invoice> invoices = [SELECT Id FROM Invoice];
        for (Invoice invoice : invoices) {
            invoiceIds.add(invoice.Id);
        }
        Assert.isTrue(invoiceIds.size() > 0, 'No invoices were created');
        List<String> successList = new List<String>();
        Test.setMock(HttpCalloutMock.class, new HttpResponseSuccessMock('{}'));
        successList = COMM_SL_VoucherReservation.createReservationVouchers(invoiceIds);

        Test.setMock(HttpCalloutMock.class, new HttpResponseSuccessMock('{' + String.join(QRCODE_RESPONSE_DATA, ',') + '}'));
        Test.startTest();
        successList = COMM_SL_VoucherReservation.createReservationVouchers(invoiceIds);
        Test.stopTest();

        List<OrderItemSummary> oisList = [
            SELECT Id, COMM_QRCode__c
            FROM OrderItemSummary
            WHERE COMM_QRCode__c != NULL
        ];

        Assert.areEqual(1, oisList.size(), 'QR Codes were not created');
        List<ProcessException> exceptions = [
            SELECT Id, Description, Status
            FROM ProcessException
            WHERE
                Category = :COMM_DO_ProcessExceptions.QR_CODE_CATEGORY
                AND AttachedToId = :oisList[0].id
                AND Status = :COMM_DO_ProcessExceptions.RESOLVED
        ];
        Assert.areEqual(1, exceptions.size(), 'Only one Process Exception should have been created');
        Assert.areEqual(COMM_DO_ProcessExceptions.RESOLVED, exceptions[0].Status, 'The exception should be resolved');
    }
}