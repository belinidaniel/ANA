/**
 * @author Daniel Reto
 * @description COMM_SL_WS_GetOrderDetails Test class
 *
 * Modification Log
 * ----------------------------------------------------------------------------------------------
 * Developer        Date          Coverage(%)   Description
 * ----------------------------------------------------------------------------------------------
 * Daniel Reto      27/06/2024    100           Original version
 **/
@isTest
private class COMM_SL_WS_GetOrderDetailsTest {
    @TestSetup
    static void makeData() {
        COMM_OMS_TestDataFactory.createOrderAndRelated();
    }

    @isTest
    static void checkOrderDetailsExistenceTest() {
        // Validate that required data was generated by the flows
        List<OrderSummary> orderSummayList = [SELECT Id, Status, OrderNumber, (SELECT Id FROM OrderItemSummaries WHERE Type = 'Order Product') FROM OrderSummary];
        Assert.areEqual(orderSummayList.isEmpty(), false, 'Order Summary not found.');
        List<FulfillmentOrder> ofList = [
            SELECT Id, Status, (SELECT Id FROM FulfillmentOrderLineItems)
            FROM FulfillmentOrder
            WHERE OrderSummaryId = :orderSummayList[0].Id
        ];

        String orderProductSummaryIds = '';
        for (OrderItemSummary orderItemSummaryRecord : orderSummayList[0].OrderItemSummaries) {
            orderProductSummaryIds += orderItemSummaryRecord.Id + ',';
        }

        Map<String, Object> params = new Map<String, Object>();
        params.put('returnedOrderSummaryId', orderSummayList[0].Id);
        params.put('returnedOrderProductSummaryIds', orderProductSummaryIds.removeEnd(','));

        Flow.Interview.COMM_OMS_Cancel_Item cancelItemFlow = new Flow.Interview.COMM_OMS_Cancel_Item(params);
        cancelItemFlow.start();

        COMM_IREP_OrderSummary orderSummaryRep = new COMM_REP_OrderSummary();
        OrderSummary expectedOrderSummaryRecord = orderSummaryRep.getOrderSummaryByOrderNumber(orderSummayList[0].OrderNumber)[0];

        Test.startTest();
        COMM_SL_WS_GetOrderDetails getOrderDetailsService = new COMM_SL_WS_GetOrderDetails();
        COMM_WS_OrderDetailOutput outputRequest = getOrderDetailsService.checkOrderDetails(orderSummayList[0].OrderNumber);
        Test.stopTest();

        // Assert
        Assert.areEqual(
            expectedOrderSummaryRecord.OrderNumber,
            outputRequest.orderNumber,
            'The result should have the same value as the OrderSummary'
        );
        Assert.areEqual(expectedOrderSummaryRecord.Id, outputRequest.orderSummaryId, 'The result should have the same value as the OrderSummary');
        Assert.areEqual(
            COMM_DO_OrderSummary.getFilterStatusCodes(expectedOrderSummaryRecord.Status),
            outputRequest.orderStatus,
            'The result should have the same value as the OrderSummary'
        );
        Assert.areEqual(
            expectedOrderSummaryRecord.OrderedDate.dateGMT(),
            outputRequest.orderDate,
            'The result should have the same value as the OrderSummary'
        );
        Assert.areEqual(
            expectedOrderSummaryRecord.BillingEmailAddress,
            outputRequest.customerEmail,
            'The result should have the same value as the OrderSummary'
        );
        Assert.areEqual(
            expectedOrderSummaryRecord.Account.Phone,
            outputRequest.customerPhoneNumber,
            'The result should have the same value as the OrderSummary.Account'
        );
        Assert.areEqual(expectedOrderSummaryRecord.TotalAmount, outputRequest.totalNet, 'The result should have the same value as the OrderSummary');
        Assert.areEqual(
            expectedOrderSummaryRecord.TotalTaxAmount,
            outputRequest.totalTaxes,
            'The result should have the same value as the OrderSummary'
        );
        Assert.areEqual(
            expectedOrderSummaryRecord.GrandTotalAmount,
            outputRequest.totalGross,
            'The result should have the same value as the OrderSummary'
        );
        Assert.areEqual(
            expectedOrderSummaryRecord.COMM_BillingName__c,
            outputRequest.billingAddress.name,
            'The result should have the same value as the OrderSummary'
        );
        Assert.areEqual(
            expectedOrderSummaryRecord.BillingStreet,
            outputRequest.billingAddress.street,
            'The result should have the same value as the OrderSummary'
        );
        Assert.areEqual(
            expectedOrderSummaryRecord.BillingPostalCode,
            outputRequest.billingAddress.zipCode,
            'The result should have the same value as the OrderSummary'
        );
        Assert.areEqual(
            expectedOrderSummaryRecord.BillingCity,
            outputRequest.billingAddress.city,
            'The result should have the same value as the OrderSummary'
        );
        Assert.areEqual(
            expectedOrderSummaryRecord.COMM_BillingVATNumber__c,
            outputRequest.billingAddress.vat,
            'The result should have the same value as the OrderSummary'
        );
        Assert.areEqual(
            expectedOrderSummaryRecord.BillingPhoneNumber,
            outputRequest.billingAddress.phoneNumber,
            'The result should have the same value as the OrderSummary'
        );
        Assert.areEqual(2, outputRequest.financialDocuments.size(), 'The result should have the same value as the OrderSummary');
        Assert.areEqual(5, outputRequest.products.size(), 'The result should have the same value as the OrderSummary');
    }

    @isTest
    static void checkOrderDetailsExistenceExceptionTest() {
        String errorMessage = '';

        Test.startTest();
        try {
            COMM_SL_WS_GetOrderDetails getOrderDetailsService = new COMM_SL_WS_GetOrderDetails();
            COMM_WS_OrderDetailOutput outputRequest = getOrderDetailsService.checkOrderDetails('TestInvalidOrderNumber');
        } catch (Exception e) {
            errorMessage = e.getMessage();
        }
        Test.stopTest();

        // Assert
        Assert.areEqual('The Order Number received doesn\'t exist!', errorMessage, 'Error didn\'t triggered the exception!');
    }
}