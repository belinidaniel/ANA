/**
 * @author Diogo Gonçalves
 * @description COMM_VFC_VoucherPDF test class
 *
 * Modification Log
 * ------------------------------------------------------------------------------------
 * Developer        Date            Coverage(%)    Description
 * -----------------------------------------------------------------------------------
 * Diogo Gonçalves  20/03/2024      83             Original version
 * Daniel Reto      22/05/2024      83             Test Class Fix
 **/
@isTest
private class COMM_VFC_VoucherPDFTest {
    private static final List<String> QRCODE_RESPONSE_DATA = new List<String>{
        '"content": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAA1JREFUGFdj+Gkf9x8ABmEClm+bvsMAAAAASUVORK5CYII="',
        '"fileType": "img/png"'
    };

    @TestSetup
    static void makeData() {
        COMM_OMS_TestDataFactory.createOrderAndRelated();
        List<Profile> profileList = [SELECT Id FROM Profile WHERE Name = 'System Administrator'];
        Long SUFFIX = DateTime.now().getTime();
        String USERNAME = 'testuser' + SUFFIX;
        COMM_TestDataFactory.insertRecords(
            1,
            true,
            'User',
            new Map<String, Object>{
                'Username' => 'testuser@ana.pt.test',
                'Email' => 'test@test.com.invalid',
                'LastName' => 'User',
                'FirstName' => 'Test',
                'CommunityNickname' => USERNAME,
                'Alias' => 'testUser',
                'COMM_EffectiveAccountId__c' => fflib_idgenerator.generate(Account.SObjectType),
                'LanguageLocaleKey' => UserInfo.getLanguage(),
                'LocaleSidKey' => UserInfo.getLocale(),
                'EmailEncodingKey' => 'UTF-8',
                'TimeZoneSidKey' => 'Europe/Lisbon',
                'ProfileId' => profileList[0].Id
            }
        );
    }

    @isTest
    static void testVoucherPDF() {
        User userRecord = [SELECT Id FROM User WHERE email = 'test@test.com.invalid' LIMIT 1];
        List<PermissionSet> permissionSetList = [
            SELECT
                Id 
            FROM
                PermissionSet
            WHERE
                Name = 'COMM_ANAAdmin' OR Name = 'COMM_Lightning_Order_Management_Operations_Manager'
        ];
        List<PermissionSetAssignment> permissionSetAssignmentList = new List<PermissionSetAssignment>();
        for(PermissionSet permissionSetRecord : permissionSetList){
            permissionSetAssignmentList.add(new PermissionSetAssignment(
                PermissionSetId = permissionSetRecord.Id,
                AssigneeId = userRecord.Id
            ));
        }
        insert permissionSetAssignmentList;
        // Run system as User
        System.runAs(userRecord) {
            // Validate that required data was generated by the flows
            List<OrderSummary> osList = [SELECT Id, status, (SELECT id FROM OrderItemSummaries) FROM OrderSummary];
            Assert.areEqual(osList.isEmpty(), false, 'Order Summary not found.');
            List<FulfillmentOrder> ofList = [
                SELECT Id, status, (SELECT Id FROM FulfillmentOrderLineItems)
                FROM FulfillmentOrder
                WHERE OrderSummaryId = :osList[0].id
            ];
            Assert.areEqual(ofList.isEmpty(), false, 'Order Fulfillment not found.');
            List<String> invoiceIds = new List<String>();
            List<Invoice> invoices = [SELECT Id FROM Invoice];
            for (Invoice invoice : invoices) {
                invoiceIds.add(invoice.Id);
            }
            Assert.isTrue(invoiceIds.size() > 0, 'No invoices were created');

            Test.setMock(HttpCalloutMock.class, new HttpResponseSuccessMock('{' + String.join(QRCODE_RESPONSE_DATA, ',') + '}'));

            Test.startTest();
            COMM_SL_VoucherReservation.createReservationVouchers(invoiceIds);

            List<OrderItemSummary> oisList = [
                SELECT Id, COMM_QRCode__c, OrderSummaryId
                FROM OrderItemSummary
                WHERE COMM_QRCode__c != NULL
            ];

            Assert.areEqual(oisList.size(), 1, 'QR Codes were not created');

            List<OrderSummary> orderSummaries = [SELECT Id FROM OrderSummary WHERE Id = :oisList[0].OrderSummaryId LIMIT 1];

            ApexPages.StandardController stdController = new ApexPages.StandardController(orderSummaries[0]);
            COMM_VFC_VoucherPDF controller = new COMM_VFC_VoucherPDF(stdController);
            Test.stopTest();
            Assert.areEqual(1, controller.orderItemTotal, 'There should be one item in the list');
        }
    }
}